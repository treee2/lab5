package task2;

// –ö–ª–∞—Å—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞
class BankAccount {
    private int balance; // –ë–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
    private String accountId; // ID —Å—á–µ—Ç–∞ (–¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)

    public BankAccount(String accountId, int initialBalance) {
        this.accountId = accountId;
        this.balance = initialBalance;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥
    // –í–ê–ñ–ù–û: synchronized —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    public boolean withdraw(int amount) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥?
        if (balance >= amount) {
            System.out.println("[" + accountId + "] –°–Ω—è—Ç–∏–µ " + amount +
                    " (–±–∞–ª–∞–Ω—Å –¥–æ: " + balance + ")");

            // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑ synchronized)
            try {
                Thread.sleep(10);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            balance -= amount; // –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
            System.out.println("[" + accountId + "] –°–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ (–±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: " + balance + ")");
            return true; // –£—Å–ø–µ—Ö
        } else {
            System.out.println("[" + accountId + "] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è " +
                    amount + " (–±–∞–ª–∞–Ω—Å: " + balance + ")");
            return false; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞
    // –í–ê–ñ–ù–û: synchronized —É–±—Ä–∞–Ω, —Ç–∞–∫ –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–ø–µ—Ä—å –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    public void deposit(int amount) {
        System.out.println("[" + accountId + "] –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ " + amount +
                " (–±–∞–ª–∞–Ω—Å –¥–æ: " + balance + ")");
        balance += amount;
        System.out.println("[" + accountId + "] –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (–±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: " + balance + ")");
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    public synchronized int getBalance() {
        return balance;
    }

    public String getAccountId() {
        return accountId;
    }
}

// –ö–ª–∞—Å—Å –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã
class Client implements Runnable {
    private String clientName;
    private BankAccount[] accounts; // –í—Å–µ —Å—á–µ—Ç–∞ –≤ –±–∞–Ω–∫–µ
    private int maxTransactions; // –ú–∞–∫—Å–∏–º—É–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    private int transactionCount = 0; // –°—á–µ—Ç—á–∏–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    private long lastTransactionTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    private int rapidTransactionCount = 0; // –°—á–µ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥—Ä—è–¥
    private static final long MIN_TRANSACTION_INTERVAL = 500; // –ú–∏–Ω–∏–º—É–º 500 –º—Å –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    private static final int MAX_RAPID_TRANSACTIONS = 2; // –ú–∞–∫—Å–∏–º—É–º 2 –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–¥—Ä—è–¥

    public Client(String clientName, BankAccount[] accounts, int maxTransactions) {
        this.clientName = clientName;
        this.accounts = accounts;
        this.maxTransactions = maxTransactions;
    }

    @Override
    public void run() {
        try {
            while (transactionCount < maxTransactions) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                long currentTime = System.currentTimeMillis();

                if (lastTransactionTime != 0) {
                    long timeSinceLastTransaction = currentTime - lastTransactionTime;

                    // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ (–º–µ–Ω—å—à–µ 500 –º—Å)
                    if (timeSinceLastTransaction < MIN_TRANSACTION_INTERVAL) {
                        rapidTransactionCount++;
                        System.out.println("‚ö†Ô∏è  " + clientName + " –¥–µ–ª–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ! " +
                                "–ò–Ω—Ç–µ—Ä–≤–∞–ª: " + timeSinceLastTransaction + " –º—Å " +
                                "(–±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥—Ä—è–¥: " + rapidTransactionCount + ")");

                        // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–¥—Ä—è–¥ - –ø—Ä–µ—Ä—ã–≤–∞–µ–º
                        if (rapidTransactionCount >= MAX_RAPID_TRANSACTIONS) {
                            System.out.println("üõë " + clientName + " –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π! " +
                                    "–ü–†–ï–†–´–í–ê–ù–ò–ï –†–ê–ë–û–¢–´.");
                            throw new InterruptedException("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —á–∞—Å—Ç–æ—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
                        }
                    } else {
                        // –ï—Å–ª–∏ –ø–∞—É–∑–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                        rapidTransactionCount = 0;
                    }
                }

                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
                int fromIndex = (int) (Math.random() * accounts.length);
                int toIndex = (int) (Math.random() * accounts.length);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —Å—á–µ—Ç–∞
                if (fromIndex == toIndex) {
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç
                }

                BankAccount fromAccount = accounts[fromIndex];
                BankAccount toAccount = accounts[toIndex];

                // –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ –æ—Ç 10 –¥–æ 50
                int amount = 10 + (int) (Math.random() * 41);

                // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
                System.out.println("\n>>> " + clientName + " –ø–µ—Ä–µ–≤–æ–¥–∏—Ç " + amount +
                        " —Å " + fromAccount.getAccountId() +
                        " –Ω–∞ " + toAccount.getAccountId());

                // –†–ï–®–ï–ù–ò–ï DEADLOCK: –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                // –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—á–µ—Ç —Å –º–µ–Ω—å—à–∏–º –∏–Ω–¥–µ–∫—Å–æ–º, –ø–æ—Ç–æ–º —Å –±–æ–ª—å—à–∏–º
                BankAccount firstLock = fromIndex < toIndex ? fromAccount : toAccount;
                BankAccount secondLock = fromIndex < toIndex ? toAccount : fromAccount;

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ–±–æ–∏—Ö —Å—á–µ—Ç–∞—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                synchronized (firstLock) {
                    synchronized (secondLock) {
                        // –¢–µ–ø–µ—Ä—å –æ–±–∞ —Å—á–µ—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ!
                        // –°–Ω–∏–º–∞–µ–º —Å –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞
                        if (fromAccount.withdraw(amount)) {
                            // –ï—Å–ª–∏ —Å–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø–æ–ª–Ω—è–µ–º –¥—Ä—É–≥–æ–π —Å—á–µ—Ç
                            toAccount.deposit(amount);
                            System.out.println(">>> " + clientName + ": –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω!\n");
                            transactionCount++;

                            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            lastTransactionTime = System.currentTimeMillis();
                        } else {
                            System.out.println(">>> " + clientName + ": –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)\n");
                        }
                    }
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                Thread.sleep(100);
            }

            System.out.println("*** " + clientName + " –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: " +
                    transactionCount + ") ***");

        } catch (InterruptedException e) {
            // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ (–¥–ª—è –ø—É–Ω–∫—Ç–∞ 4 –∑–∞–¥–∞–Ω–∏—è)
            System.out.println("!!! " + clientName + " –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: " +
                    transactionCount + ") !!!");
        }
    }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å
public class BankTransferSimulation {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–µ–º 5 –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 1000
        BankAccount[] accounts = new BankAccount[5];
        for (int i = 0; i < accounts.length; i++) {
            accounts[i] = new BankAccount("–°—á–µ—Ç-" + (i + 1), 1000);
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –¥–µ–Ω–µ–≥ –≤ —Å–∏—Å—Ç–µ–º–µ (–¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π!)
        int totalBefore = 0;
        for (BankAccount acc : accounts) {
            totalBefore += acc.getBalance();
        }
        System.out.println("=== –ù–ê–ß–ê–õ–û –°–ò–ú–£–õ–Ø–¶–ò–ò ===");
        System.out.println("–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: " + totalBefore + "\n");

        // –°–æ–∑–¥–∞–µ–º 3 –æ–±—ã—á–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ 1 –±—ã—Å—Ç—Ä–æ–≥–æ (–Ω–∞—Ä—É—à–∏—Ç–µ–ª—è)
        int numClients = 4;
        int maxTransactions = 5;
        Thread[] clientThreads = new Thread[numClients];

        for (int i = 0; i < numClients; i++) {
            Client client = new Client("–ö–ª–∏–µ–Ω—Ç-" + (i + 1), accounts, maxTransactions);
            clientThreads[i] = new Thread(client);
            clientThreads[i].start();
        }

        // –°–æ–∑–¥–∞–µ–º "–±—ã—Å—Ç—Ä–æ–≥–æ" –∫–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞
        // –û–Ω –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –ø–∞—É–∑—ã
        Thread fastClient = new Thread(() -> {
            String clientName = "–ë—ã—Å—Ç—Ä—ã–π-–ö–ª–∏–µ–Ω—Ç";
            int count = 0;
            try {
                while (count < 10) {
                    int fromIndex = (int) (Math.random() * accounts.length);
                    int toIndex = (int) (Math.random() * accounts.length);
                    if (fromIndex == toIndex) continue; // –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç —Å –Ω–µ–≥–æ –∂–µ

                    BankAccount fromAccount = accounts[fromIndex];
                    BankAccount toAccount = accounts[toIndex];
                    int amount = 10 + (int) (Math.random() * 41);

                    System.out.println("\n>>> " + clientName + " (–ë–ï–ó –ü–ê–£–ó–´) –ø–µ—Ä–µ–≤–æ–¥–∏—Ç " + amount);

                    BankAccount firstLock = fromIndex < toIndex ? fromAccount : toAccount;
                    BankAccount secondLock = fromIndex < toIndex ? toAccount : fromAccount;

                    synchronized (firstLock) {
                        synchronized (secondLock) {
                            if (fromAccount.withdraw(amount)) {
                                toAccount.deposit(amount);
                                count++;
                            }
                        }
                    }
                    // –ù–ï–¢ Thread.sleep() - –¥–µ–ª–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ!
                }
            } catch (Exception e) {
                System.out.println("!!! " + clientName + " –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: " + e.getMessage());
            }
        });

        // –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        try {
            Thread.sleep(2000);
            System.out.println("\nüöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞—Ä—É—à–∏—Ç–µ–ª—è)...\n");
            fastClient.start();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –±—ã—Å—Ç—Ä–æ–≥–æ)
        try {
            for (Thread thread : clientThreads) {
                thread.join();
            }
            fastClient.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        System.out.println("\n=== –ö–û–ù–ï–¶ –°–ò–ú–£–õ–Ø–¶–ò–ò ===");
        int totalAfter = 0;
        for (BankAccount acc : accounts) {
            int balance = acc.getBalance();
            System.out.println(acc.getAccountId() + ": " + balance + " —Ä—É–±.");
            totalAfter += balance;
        }
        System.out.println("\n–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Å–∏—Å—Ç–µ–º–µ: " + totalAfter);
        System.out.println("–†–∞–∑–Ω–∏—Ü–∞: " + (totalAfter - totalBefore) + " (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0!)");
    }
}