package task3;

// –ö–ª–∞—Å—Å –ø–æ–≤–∞—Ä–∞ (Consumer)
class Chief implements Runnable {
    private String name;
    private OrderQueue orderQueue;
    private int maxConcurrentDishes; // –ú–∞–∫—Å–∏–º—É–º –±–ª—é–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    private volatile boolean working = true; // –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã

    public Chief(String name, OrderQueue orderQueue, int maxConcurrentDishes) {
        this.name = name;
        this.orderQueue = orderQueue;
        this.maxConcurrentDishes = maxConcurrentDishes;
    }

    @Override
    public void run() {
        try {
            while (working) {
                // –ë–µ—Ä–µ–º –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                Order order = orderQueue.takeOrder();

                System.out.println("\nüë®‚Äçüç≥ " + name + " –Ω–∞—á–∞–ª –≥–æ—Ç–æ–≤–∏—Ç—å: " + order);

                // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
                Thread.sleep(order.getDish().getPreparationTime());

                System.out.println("‚ú® " + name + " –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ: " + order);
            }
        } catch (InterruptedException e) {
            System.out.println("\n!!! " + name + " –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
        }
    }

    public void stopWorking() {
        working = false;
    }
}
