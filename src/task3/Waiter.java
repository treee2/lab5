package task3;

// –ö–ª–∞—Å—Å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ (Producer)
class Waiter implements Runnable {
    private String name;
    private OrderQueue orderQueue;
    private Dish[] menu; // –ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞
    private int ordersToCreate; // –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞—Ç—å

    public Waiter(String name, OrderQueue orderQueue, Dish[] menu, int ordersToCreate) {
        this.name = name;
        this.orderQueue = orderQueue;
        this.menu = menu;
        this.ordersToCreate = ordersToCreate;
    }

    @Override
    public void run() {
        try {
            for (int i = 0; i < ordersToCreate; i++) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∑–∞–∫–∞–∑
                Dish randomDish = menu[(int) (Math.random() * menu.length)];
                String customerName = "–ö–ª–∏–µ–Ω—Ç-" + (i + 1);
                Order order = new Order(customerName, randomDish);

                System.out.println("\nüßë‚Äçüíº " + name + " –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑: " + order);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                orderQueue.addOrder(order);

                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–µ–º–æ–º –∑–∞–∫–∞–∑–æ–≤
                Thread.sleep(300);
            }

            System.out.println("\n*** " + name + " –∑–∞–∫–æ–Ω—á–∏–ª —Å–º–µ–Ω—É ***");

        } catch (InterruptedException e) {
            System.out.println("!!! " + name + " –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω");
        }
    }
}
